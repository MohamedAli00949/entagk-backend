{"version":3,"file":"static/js/77.feb4518f.chunk.js","mappings":"qLAMMA,GAASC,EAAAA,EAAAA,OAAK,kBAAM,oDAAN,IACdC,GAAeD,EAAAA,EAAAA,OAAK,kBAAM,4BAAN,IAmE1B,UAjEA,YAAyC,IAAxBE,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QACrBC,EAAkB,UAATH,EAAmBI,EAAAA,GAAuB,YAATJ,EAAqBK,EAAAA,GAAgBC,EAAAA,GAC/EC,GAAgBC,EAAAA,EAAAA,SAAOC,EAAAA,EAAAA,GAAY,CAAEC,IAAKT,EAAK,GAAD,OAAID,EAAJ,SAAgBU,IAAKC,OAAQV,EAAK,GAAD,OAAID,EAAJ,cACrF,GAA4BY,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACO,OAAXF,GAAgD,SAA7BZ,EAAK,GAAD,OAAID,EAAJ,SAAgBgB,OACzCT,EAAcU,QAAQC,WAAWjB,EAAK,GAAD,OAAID,EAAJ,SAAgBU,KACrDH,EAAcU,QAAQE,aAAalB,EAAK,GAAD,OAAID,EAAJ,YACvCO,EAAcU,QAAQG,aACtBC,QAAQC,IAAItB,IAGdqB,QAAQC,IAAIT,EAEb,GAAE,CAACA,KAQF,iBAAKU,UAAU,gBAAf,WACE,iBAAKA,UAAU,aAAf,WACE,cACEC,MAAO,CAAEC,MAAO,UAAWC,SAAU,GAAIC,WAAY,KADvD,yBAGA,SAAC9B,EAAD,CACEI,KAAMA,EACN2B,QAASzB,EACTD,QAASA,EACTF,KAAI,UAAKA,EAAL,QACJc,UAAWA,OAGe,SAA7Bb,EAAK,GAAD,OAAID,EAAJ,SAAgBgB,OACnB,iBAAKO,UAAU,aAAf,WACE,cACEC,MAAO,CAAEC,MAAO,UAAWC,SAAU,GAAIC,WAAY,KADvD,2BAGA,iBAAKJ,UAAU,kBAAf,WACE,uBAAItB,EAAK,GAAD,OAAID,EAAJ,cACR,kBACEA,KAAK,QACLuB,UAAU,QACVM,IAAI,IACJC,IAAI,MACJC,MAAO9B,EAAK,GAAD,OAAID,EAAJ,WACXgB,KAAI,UAAKhB,EAAL,UACJgC,SAjCS,SAACC,GACpB/B,GAAQ,kBAAKD,GAAN,cAAagC,EAAEC,OAAOlB,KAAOmB,OAAOF,EAAEC,OAAOH,UACpDjB,GAAWD,EACZ,UAmCa,UAATb,IACC,iBAAKuB,UAAU,aAAf,WACE,cAAGC,MAAO,CAAEC,MAAO,UAAWC,SAAU,GAAIC,WAAY,KAAxD,oBACA,SAAC5B,EAAD,CAAcC,KAAK,aAAaC,KAAMA,EAAMC,QAASA,SAK9D,C,oBCnCD,IArCoB,SAAC,GAAuC,IAArCQ,EAAoC,EAApCA,IAAoC,IAA/BC,OAAAA,OAA+B,MAAtB,GAAsB,MAAlByB,KAAAA,OAAkB,SACnDC,EAAQ,IAAIC,MAClBD,EAAM3B,IAAMA,EACZ2B,EAAM1B,OAASA,EAAS,IAExB0B,EAAMD,KAAOA,EAuBb,MAAO,CACLhB,WAtBiB,YACbiB,EAAME,QAAWF,EAAMG,aACzBH,EAAMI,OAAOC,OAAM,WAAQ,GAE9B,EAmBCC,WAjBiB,WACjBN,EAAMO,OACP,EAgBCzB,aAdmB,SAACY,GAAD,OAAYM,EAAM1B,OAASoB,EAAQ,GAAnC,EAenBb,WAbiB,SAACR,GAClB2B,EAAMO,QACNP,EAAM3B,IAAMA,CACb,EAWCmC,WATiB,SAACT,GAClBC,EAAMD,KAAOA,CACd,EASF,C","sources":["components/Setting/Sound.js","utils/audioPlayer.js"],"sourcesContent":["import React, { lazy, useEffect, useRef, useState } from 'react';\r\n\r\nimport { alarmSounds, tickingSounds, clickSounds } from \"../../actions/timer\";\r\n\r\nimport audioPlayer from '../../utils/audioPlayer';\r\n\r\nconst Select = lazy(() => import(\"./Select\"));\r\nconst ToggleButton = lazy(() => import(\"./ToggleButton\"));\r\n\r\nfunction Sound({ type, data, setData }) {\r\n  const sounds = type === 'alarm' ? alarmSounds : type === 'ticking' ? tickingSounds : clickSounds;\r\n  const audioChanging = useRef(audioPlayer({ src: data[`${type}Type`].src, volume: data[`${type}Volume`] }));\r\n  const [change, setChange] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (change !== null && data[`${type}Type`].name !== 'none') {\r\n      audioChanging.current.changeFile(data[`${type}Type`].src);\r\n      audioChanging.current.chengeVolume(data[`${type}Volume`]);\r\n      audioChanging.current.handlePlay();\r\n      console.log(type)\r\n    }\r\n    // setChange(false);\r\n    console.log(change);\r\n    // eslint-disable-next-line\r\n  }, [change]);\r\n\r\n  const handleChange = (e) => {\r\n    setData({ ...data, [e.target.name]: Number(e.target.value) });\r\n    setChange(!change);\r\n  }\r\n\r\n  return (\r\n    <div className='alarm-details'>\r\n      <div className=\"alarm-type\">\r\n        <p\r\n          style={{ width: \"inherit\", fontSize: 18, fontWeight: 400 }}\r\n        >Sound type</p>\r\n        <Select\r\n          data={data}\r\n          options={sounds}\r\n          setData={setData}\r\n          type={`${type}Type`}\r\n          setChange={setChange}\r\n        />\r\n      </div>\r\n      {data[`${type}Type`].name !== \"none\" && (\r\n        <div className=\"alarm-type\">\r\n          <p\r\n            style={{ width: \"inherit\", fontSize: 18, fontWeight: 400 }}\r\n          >Sound Volume</p>\r\n          <div className='range-container'>\r\n            <p>{data[`${type}Volume`]}</p>\r\n            <input\r\n              type=\"range\"\r\n              className='range'\r\n              min=\"0\"\r\n              max=\"100\"\r\n              value={data[`${type}Volume`]}\r\n              name={`${type}Volume`}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n      {type === \"alarm\" && (\r\n        <div className=\"alarm-type\">\r\n          <p style={{ width: \"inherit\", fontSize: 18, fontWeight: 400 }}>Repet</p>\r\n          <ToggleButton type=\"alarmRepet\" data={data} setData={setData} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sound;","const audioPlayer = ({ src, volume = 50, loop = false}) => {\r\n  const audio = new Audio();\r\n  audio.src = src;\r\n  audio.volume = volume / 100;\r\n\r\n  audio.loop = loop;\r\n\r\n  const handlePlay = () => {\r\n    if (audio.paused || !audio.currentTime) {\r\n      audio.play().catch(() => {});\r\n    }\r\n  };\r\n\r\n  const handleStop = () => {\r\n    audio.pause();\r\n  }\r\n\r\n  const chengeVolume = (value) => (audio.volume = value / 100);\r\n\r\n  const changeFile = (src) => {\r\n    audio.pause();\r\n    audio.src = src;\r\n  }\r\n\r\n  const changeLoop = (loop) => {\r\n    audio.loop = loop;\r\n  }\r\n\r\n  return {\r\n    handlePlay, \r\n    handleStop,\r\n    chengeVolume,\r\n    changeFile,\r\n    changeLoop\r\n  }\r\n}\r\n\r\nexport default audioPlayer;"],"names":["Select","lazy","ToggleButton","type","data","setData","sounds","alarmSounds","tickingSounds","clickSounds","audioChanging","useRef","audioPlayer","src","volume","useState","change","setChange","useEffect","name","current","changeFile","chengeVolume","handlePlay","console","log","className","style","width","fontSize","fontWeight","options","min","max","value","onChange","e","target","Number","loop","audio","Audio","paused","currentTime","play","catch","handleStop","pause","changeLoop"],"sourceRoot":""}