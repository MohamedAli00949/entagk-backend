{"version":3,"file":"static/js/804.48634e0e.chunk.js","mappings":"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","sources":["components/Clock/Timer.js","utils/audioPlayer.js","utils/helper.js"],"sourcesContent":["import React, { lazy, Suspense, useEffect, useState, useCallback, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\"; // 2\r\n\r\nimport { changeActive, PERIOD, START_TIMER, STOP_TIMER } from \"../../actions/timer\";\r\n\r\nimport { pushNotification } from \"../../utils/helper\";\r\nimport audioPlayer from \"../../utils/audioPlayer\";\r\n\r\nimport Loading from \"../../utils/Loading\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst AnalogTimer = lazy(() => import(\"./Analog/Analog\"));\r\nconst DigitalTimer = lazy(() => import(\"./Digital/Digital\"));\r\n\r\nconst worker = new window.Worker('worker.js');\r\nconst Timer = () => {\r\n    const { active, activites, setting, started, periodNum, restOfTime } = useSelector((state) => state.timer);\r\n    const [time, setTime] = useState(restOfTime === null ? 0 : restOfTime);\r\n\r\n    const activePeriod = setting.time[active];\r\n    const dispatch = useDispatch();\r\n\r\n    /** All sounds that we use it in timer.*/\r\n    const tickingSound = useRef(setting.tickingType.name !== \"none\" ? audioPlayer({ src: setting.tickingType.src, volume: setting.tickingVolume, loop: true }) : null);\r\n    const alarmSound = useRef(audioPlayer({ src: setting.alarmType.src, volume: setting.alarmVolume, loop: setting.alarmRepet }));\r\n    const clickSound = useRef(setting.clickType.name !== \"none\" ? audioPlayer({ src: setting.clickType.src, volume: setting.clickVolume }) : null);\r\n\r\n    useEffect(() => {\r\n        if (Notification.permission === 'default') {\r\n            Notification.requestPermission();\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        document.body.style.backgroundColor = activites[active].color;\r\n\r\n        if (setting.time !== undefined) {\r\n            setTime(setting?.time[active] - restOfTime);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [active, setting.time]);\r\n\r\n    useEffect(() => {\r\n        if (setting.tickingType.name !== 'none') {\r\n            tickingSound.current.chengeVolume(setting.tickingVolume);\r\n            tickingSound.current.changeFile(setting.tickingType.src);\r\n        }\r\n\r\n        alarmSound.current.chengeVolume(setting.alarmVolume);\r\n        alarmSound.current.changeFile(setting.alarmType.src);\r\n        alarmSound.current.changeLoop(setting.alarmRepet);\r\n\r\n        if (setting.clickType.name !== 'none') {\r\n            clickSound.current.chengeVolume(setting.clickVolume);\r\n            clickSound.current.changeFile(setting.clickType.src);\r\n        }\r\n    }, [setting]);\r\n\r\n    useEffect(() => {\r\n        if ((active !== PERIOD && setting.autoBreaks) || (active === PERIOD && setting.autoPomodors && periodNum !== 0)) {\r\n            setTimeout(() => {\r\n                alarmSound.current.handleStop();\r\n                if (setting.tickingType.name !== \"none\") {\r\n                    tickingSound.current.handlePlay();\r\n                }\r\n                worker.postMessage({ started: !started, count: setting.time[active] });\r\n                dispatch({ type: START_TIMER, data: 0 });\r\n            }, 10000)\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [active, setting.autoBreaks, setting.autoPomodors]);\r\n\r\n    useEffect(() => {\r\n        if (started) {\r\n            document.body.onbeforeunload = () => {\r\n                return () => {\r\n                    return \"Hello, world!\"\r\n                }\r\n            }\r\n\r\n            if (setting.focusMode) {\r\n                document.body.style.backgroundColor = \"rgb(30 30 30)\";\r\n                document.body.style.overflow = \"hidden\";\r\n            }\r\n        } else {\r\n            document.body.onbeforeunload = null;\r\n            if (setting.focusMode) {\r\n                document.body.style.backgroundColor = activites[active].color;\r\n                document.body.style.overflow = \"auto\";\r\n            }\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [started]);\r\n\r\n    worker.onmessage = (event) => {\r\n        if (event.data !== 'stop') {\r\n            setTime(event.data);\r\n            if (Notification.permission === 'granted') {\r\n                if (time !== 0) {\r\n                    if (setting.notificationType === 'every') {\r\n                        if (time % (setting.notificationInterval * 60) === 0 && time !== activePeriod) {\r\n                            pushNotification(`${time / 60} minutes left!`);\r\n                        }\r\n                    } else {\r\n                        if (time - (setting.notificationInterval * 60) === 0 && time !== activePeriod) {\r\n                            pushNotification(`${time / 60} minutes left!`);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            dispatch({ type: STOP_TIMER, data: 0 });\r\n\r\n            alarmSound.current.handlePlay();\r\n            if (setting.tickingType.name !== \"none\") {\r\n                tickingSound.current.handleStop();\r\n            }\r\n\r\n            if (Notification.permission === 'granted') {\r\n                if (active === PERIOD) {\r\n                    pushNotification(\"It's time to take a break\");\r\n                } else {\r\n                    pushNotification(\"It's time to focus!\");\r\n                }\r\n            }\r\n\r\n            dispatch(changeActive(active));\r\n        }\r\n    }\r\n\r\n\r\n    const toggleStart = useCallback(() => {\r\n        console.log(\"toggle start\")\r\n        if (setting.clickType.name !== \"none\") {\r\n            clickSound.current.handlePlay();\r\n        }\r\n        alarmSound.current.handleStop();\r\n\r\n        if (started) {\r\n            worker.postMessage(\"stop\");\r\n            if (setting.tickingType.name !== \"none\") {\r\n                tickingSound.current.handleStop();\r\n            }\r\n            dispatch({ type: STOP_TIMER, data: setting.time[active] - time });\r\n        } else {\r\n            if (setting.tickingType.name !== \"none\") {\r\n                tickingSound.current.handlePlay();\r\n            }\r\n            worker.postMessage({ started: !started, count: time });\r\n            dispatch({ type: START_TIMER, data: 0 });\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n    }, [started, time]);\r\n\r\n    const handleReset = () => {\r\n        setTime(activePeriod);\r\n        if (setting.clickType.name !== \"none\") {\r\n            clickSound.current.handlePlay();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"clock-container\" style={{ background: `${activites[active].timerBorder}` }}>\r\n                <div className=\"clock\">\r\n                    <Suspense fallback={<Loading color={activites[active].color} backgroud=\"transparent\" width=\"200\" height=\"200\" cx=\"50\" cy=\"50\" r=\"20\" strokeWidth=\"2.5\" />}>\r\n                        {setting.format === \"digital\" ? (\r\n                            <>\r\n                                <DigitalTimer handleReset={handleReset} toggleStart={toggleStart} setTime={setTime} time={time} />\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <AnalogTimer handleReset={handleReset} toggleStart={toggleStart} setTime={setTime} time={time} />\r\n                            </>\r\n                        )}\r\n                    </Suspense>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Timer;","const audioPlayer = ({ src, volume = 50, loop = false}) => {\r\n  const audio = new Audio();\r\n  audio.src = src;\r\n  audio.volume = volume / 100;\r\n\r\n  audio.loop = loop;\r\n\r\n  const handlePlay = () => {\r\n    if (audio.paused || !audio.currentTime) {\r\n      audio.play().catch(() => {});\r\n    }\r\n  };\r\n\r\n  const handleStop = () => {\r\n    audio.pause();\r\n  }\r\n\r\n  const chengeVolume = (value) => (audio.volume = value / 100);\r\n\r\n  const changeFile = (src) => {\r\n    audio.pause();\r\n    audio.src = src;\r\n  }\r\n\r\n  const changeLoop = (loop) => {\r\n    audio.loop = loop;\r\n  }\r\n\r\n  return {\r\n    handlePlay, \r\n    handleStop,\r\n    chengeVolume,\r\n    changeFile,\r\n    changeLoop\r\n  }\r\n}\r\n\r\nexport default audioPlayer;","export const formatTime = (t) => {\r\n  const sec = t % 60;\r\n  const min = Math.floor(t / 60);\r\n  // console.log(min, sec);\r\n  return `${min >= 10 ? min : '0' + min}:${sec >= 10 ? sec : '0' + sec}`\r\n};\r\n\r\nexport const pushNotification = (message) => {\r\n  new Notification(message, {\r\n    icon: 'favicon.ico',\r\n    tag: \"mohamed ali\",\r\n    requireInteraction: true,\r\n    renotify: true\r\n  });\r\n};"],"names":["AnalogTimer","lazy","DigitalTimer","worker","window","Worker","useSelector","state","timer","active","activites","setting","started","periodNum","restOfTime","useState","time","setTime","activePeriod","dispatch","useDispatch","tickingSound","useRef","tickingType","name","audioPlayer","src","volume","tickingVolume","loop","alarmSound","alarmType","alarmVolume","alarmRepet","clickSound","clickType","clickVolume","useEffect","Notification","permission","requestPermission","document","body","style","backgroundColor","color","undefined","current","chengeVolume","changeFile","changeLoop","PERIOD","autoBreaks","autoPomodors","setTimeout","handleStop","handlePlay","postMessage","count","type","START_TIMER","data","onbeforeunload","focusMode","overflow","onmessage","event","notificationType","notificationInterval","pushNotification","STOP_TIMER","changeActive","toggleStart","useCallback","console","log","handleReset","className","background","timerBorder","Suspense","fallback","Loading","backgroud","width","height","cx","cy","r","strokeWidth","format","audio","Audio","paused","currentTime","play","catch","pause","value","formatTime","t","sec","min","Math","floor","message","icon","tag","requireInteraction","renotify"],"sourceRoot":""}