{"version":3,"file":"static/js/904.b700d8e5.chunk.js","mappings":"oQAUMA,GAAWC,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IAoGtB,UAlGa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,UAAWC,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,WAAeC,GAAY,YAC5DC,GAAWC,EAAAA,EAAAA,MACTC,GAAaC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAV,IAA9BH,SACAI,GAAYH,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMG,KAAV,IAA7BD,QACR,GAAgCE,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAgBA,OAAID,GAEA,SAAC,EAAAE,SAAD,CAAUC,UAAU,SAAC,IAAD,CAASC,KAAK,KAAKC,YAAY,IAAIC,MAAO,qBAA9D,UACE,SAACrB,EAAD,CAAUsB,QAASjB,EAAOkB,QAASP,EAAad,UAAWA,EAAWC,aAAcA,OAMxF,0BACE,iBACEqB,UAAS,eAAUhB,IAAaH,EAAMoB,IAAM,SAAW,IACvDC,QAlBe,aACbrB,EAAMsB,OAASf,EAAQgB,oBAAwBhB,EAAQgB,mBAAqBvB,EAAMwB,MAAQxB,EAAMyB,MACpGxB,EAAS,CAAEyB,KAAMC,EAAAA,GAAoBC,KAAM5B,GAE9C,EAYG,UAGGH,IAAcG,EAAMoB,KACnB,gBAAKD,UAAU,oBAAf,UACE,SAAC,IAAD,CAASL,KAAK,KAAKC,YAAY,IAAIC,MAAO,wBAG5C,gBAAKG,UAAU,WAAf,UACE,iBAAKA,UAAU,UAAf,WACIZ,EAAQgB,oBACR,mBAAQ,aAAW,eAAeF,QAnC5B,WAClBpB,GAAS4B,EAAAA,EAAAA,IAAU7B,EAAMoB,IAAKtB,EAAcC,GAC7C,EAiCa,SACGC,EAAMsB,OACL,SAAC,MAAD,KAEA,SAAC,MAAD,OAIN,mBACE,aAAW,cACXD,QAAS,kBAAMV,GAAY,SAAAmB,GAAE,OAAKA,CAAL,GAApB,EAFX,UAGC,SAAC,MAAD,OACD,mBACE,aAAW,eACXT,QA7CO,WACnBpB,GAAS8B,EAAAA,EAAAA,IAAW/B,EAAMoB,IAAKtB,EAAcC,GAC9C,EAyCW,UAGC,SAAC,MAAD,YAIP,iBAAKiC,MAAO,CACVC,QAAS,OACTC,WAAY,SACZC,MAAO,OACPC,eAAgB,iBAJlB,WAME,iBAAKjB,UAAU,aAAf,WACE,gBAAKA,UAAU,iBAAf,SACGnB,EAAMsB,OACL,SAAC,MAAD,CAAmBH,UAAU,kBAE7B,SAAC,MAAD,CAAwBA,UAAU,kBAGtC,cAAGa,MAAO,CACRK,eAAgBrC,EAAMsB,OAAS,gBADjC,SAEItB,EAAMsC,WAEZ,eAAGnB,UAAU,UAAb,WACE,0BAAOnB,EAAMwB,OACb,iBAAMQ,MAAO,CACXO,WAAY,SACZC,SAAU,OACVC,aAAc,OAHhB,gBAKA,0BAAOzC,EAAMyB,YAGA,KAAhBzB,EAAM0C,QACL,gBAAKvB,UAAU,aAAf,UACE,uBAAInB,EAAM0C,cAMrB,C","sources":["components/Tasks/Task/Task.js"],"sourcesContent":["import React, { lazy, Suspense, useState } from \"react\";\r\n\r\nimport { BsCheckCircleFill } from 'react-icons/bs';\r\n\r\nimport { FiEdit3 } from 'react-icons/fi';\r\nimport { MdDelete, MdRadioButtonUnchecked } from 'react-icons/md';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { checkTask, deleteTask, CHANGE_ACTIVE_TASK } from \"../../../actions/tasks\";\r\nimport Loading from \"../../../utils/Loading\";\r\n\r\nconst TaskForm = lazy(() => import(\"../TaskForm/TaskForm\"));\r\n\r\nconst Task = ({ isLoading, setIsLoading, setMessage, ...props }) => {\r\n  const dispatch = useDispatch();\r\n  const { activeId } = useSelector(state => state.tasks);\r\n  const { setting } = useSelector(state => state.timer);\r\n  const [openEdit, setOpenEdit] = useState(false);\r\n\r\n  const handleCheck = () => {\r\n    dispatch(checkTask(props._id, setIsLoading, setMessage));\r\n  }\r\n\r\n  const handleDelete = () => {\r\n    dispatch(deleteTask(props._id, setIsLoading, setMessage));\r\n  }\r\n\r\n  const handleActive = () => {\r\n    if ((!props.check && setting.autoStartNextTask) || (!setting.autoStartNextTask && props.act !== props.est)) {\r\n      dispatch({ type: CHANGE_ACTIVE_TASK, data: props });\r\n    }\r\n  }\r\n\r\n  if (openEdit) {\r\n    return (\r\n      <Suspense fallback={<Loading size=\"40\" strokeWidth=\"3\" color={\"rgb(197 197 197)\"} />}>\r\n        <TaskForm oldData={props} setOpen={setOpenEdit} isLoading={isLoading} setIsLoading={setIsLoading} />\r\n      </Suspense>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        className={`task ${activeId === props._id ? \"active\" : ''}`}\r\n        onClick={handleActive}>\r\n        {isLoading === props._id ? (\r\n          <div className=\"loading-container\">\r\n            <Loading size=\"40\" strokeWidth=\"3\" color={\"rgb(197 197 197)\"} />\r\n          </div>\r\n        ) : (\r\n          <div className=\"overflow\">\r\n            <div className=\"buttons\">\r\n              {!setting.autoStartNextTask && (\r\n                <button aria-label=\"check button\" onClick={handleCheck}>\r\n                  {props.check ? (\r\n                    <BsCheckCircleFill />\r\n                  ) : (\r\n                    <MdRadioButtonUnchecked />\r\n                  )}\r\n                </button>\r\n              )}\r\n              <button\r\n                aria-label=\"edit button\"\r\n                onClick={() => setOpenEdit(oe => !oe)}\r\n              ><FiEdit3 /></button>\r\n              <button\r\n                aria-label=\"delet button\"\r\n                onClick={handleDelete}\r\n              ><MdDelete /></button>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div style={{\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          width: \"100%\",\r\n          justifyContent: \"space-between\"\r\n        }}>\r\n          <div className=\"task-inner\">\r\n            <div className=\"icon-container\">\r\n              {props.check ? (\r\n                <BsCheckCircleFill className=\"task-uncheck\" />\r\n              ) : (\r\n                <MdRadioButtonUnchecked className=\"task-check\" />\r\n              )}\r\n            </div>\r\n            <p style={{\r\n              textDecoration: props.check && \"line-through\"\r\n            }}>{props.name}</p>\r\n          </div>\r\n          <p className=\"act-est\">\r\n            <span>{props.act}</span>\r\n            <span style={{\r\n              fontWeight: \"normal\",\r\n              fontSize: \"18px\",\r\n              marginInline: \"4px\"\r\n            }}>/</span>\r\n            <span>{props.est}</span>\r\n          </p>\r\n        </div>\r\n        {props.notes !== '' && (\r\n          <div className=\"task-notes\">\r\n            <p>{props.notes}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Task;"],"names":["TaskForm","lazy","isLoading","setIsLoading","setMessage","props","dispatch","useDispatch","activeId","useSelector","state","tasks","setting","timer","useState","openEdit","setOpenEdit","Suspense","fallback","size","strokeWidth","color","oldData","setOpen","className","_id","onClick","check","autoStartNextTask","act","est","type","CHANGE_ACTIVE_TASK","data","checkTask","oe","deleteTask","style","display","alignItems","width","justifyContent","textDecoration","name","fontWeight","fontSize","marginInline","notes"],"sourceRoot":""}