{"version":3,"file":"static/js/904.7629287f.chunk.js","mappings":"8MAWMA,GAAWC,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IAiFtB,UA/Ea,SAACC,GACZ,IAAMC,GAAWC,EAAAA,EAAAA,MACTC,GAAaC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAV,IAA9BH,SACAI,GAAYH,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMG,KAAV,IAA7BD,QAER,GAA0BE,EAAAA,EAAAA,YAA1B,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,WAAS,GAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAgBA,OAAID,GAEA,SAAC,EAAAE,SAAD,CAAUC,UAAU,wCAApB,UACE,SAACjB,EAAD,CAAUkB,QAAShB,EAAOiB,QAASJ,OAMvC,2BACGH,IACC,SAAC,IAAD,CAASQ,QAAO,iBAAYR,EAAZ,oBAA6BV,EAAMmB,MAAQC,KAAK,QAAQC,WAAYV,KAEtF,iBAAKW,UAAS,eAAUnB,IAAaH,EAAMuB,IAAM,UAAYC,QAnB5C,aACdxB,EAAMyB,OAASlB,EAAQmB,oBAAwBnB,EAAQmB,mBAAqB1B,EAAM2B,MAAQ3B,EAAM4B,MACnG3B,EAAS,CAAEmB,KAAMS,EAAAA,GAAoBC,KAAM,CAAEP,GAAIvB,EAAMuB,GAAIJ,KAAMnB,EAAMmB,OAE1E,EAeG,WACE,gBAAKG,UAAU,WAAf,UACE,iBAAKA,UAAU,UAAf,WACIf,EAAQmB,oBACR,mBAAQ,aAAW,eAAeF,QA/B1B,WAClBvB,GAAS8B,EAAAA,EAAAA,IAAU/B,EAAMuB,GAAIZ,GAC9B,EA6BW,SACGX,EAAMyB,OACL,SAAC,MAAD,KAEA,SAAC,MAAD,OAIN,mBAAQ,aAAW,cAAcD,QAAS,kBAAMX,GAAY,SAAAmB,GAAE,OAAKA,CAAL,GAApB,EAA1C,UAAwE,SAAC,MAAD,OACxE,mBAAQ,aAAW,eAAeR,QApCvB,WACnBvB,GAASgC,EAAAA,EAAAA,IAAWjC,EAAMuB,GAAIZ,GAC/B,EAkCS,UAAyD,SAAC,MAAD,YAG7D,iBAAKuB,MAAO,CACVC,QAAS,OACTC,WAAY,SACZC,MAAO,OACPC,eAAgB,iBAJlB,WAME,iBAAKhB,UAAU,aAAf,WACE,gBAAKA,UAAU,iBAAf,SACGtB,EAAMyB,OACL,SAAC,MAAD,CAAmBH,UAAU,kBAE7B,SAAC,MAAD,CAAwBA,UAAU,kBAGtC,cAAGY,MAAO,CAAEK,eAAgBvC,EAAMyB,OAAS,gBAA3C,SAA8DzB,EAAMmB,WAEtE,eAAGG,UAAU,UAAb,WAAuB,0BAAOtB,EAAM2B,MAApC,OAAkD,0BAAO3B,EAAM4B,YAEhD,KAAhB5B,EAAMwC,QACL,gBAAKlB,UAAU,aAAf,UACE,uBAAItB,EAAMwC,eAMrB,C","sources":["components/Tasks/Task/Task.js"],"sourcesContent":["import React, { lazy, Suspense, useState } from \"react\";\r\n\r\nimport { BsCheckCircleFill } from 'react-icons/bs';\r\n\r\nimport { FiEdit3 } from 'react-icons/fi';\r\nimport { MdDelete, MdRadioButtonUnchecked } from 'react-icons/md';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { checkTask, deleteTask, CHANGE_ACTIVE_TASK } from \"../../../actions/tasks\";\r\nimport Message from \"../../../utils/Message\";\r\n// import Loading from \"../../../Utils/Loading\";\r\n\r\nconst TaskForm = lazy(() => import(\"../TaskForm/TaskForm\"));\r\n\r\nconst Task = (props) => {\r\n  const dispatch = useDispatch();\r\n  const { activeId } = useSelector(state => state.tasks);\r\n  const { setting } = useSelector(state => state.timer);\r\n  // const {active, activites} = useSelector(state => state.timer);\r\n  const [error, setError] = useState();\r\n  const [openEdit, setOpenEdit] = useState(false);\r\n\r\n  const handleCheck = () => {\r\n    dispatch(checkTask(props.id, setError));\r\n  }\r\n\r\n  const handleDelete = () => {\r\n    dispatch(deleteTask(props.id, setError));\r\n  }\r\n\r\n  const handleActive = () => {\r\n    if((!props.check && setting.autoStartNextTask) || (!setting.autoStartNextTask && props.act !== props.est)) {\r\n      dispatch({ type: CHANGE_ACTIVE_TASK, data: { id: props.id, name: props.name } });\r\n    }\r\n  }\r\n\r\n  if (openEdit) {\r\n    return (\r\n      <Suspense fallback={<div>loading...</div>}>\r\n        <TaskForm oldData={props} setOpen={setOpenEdit} />\r\n      </Suspense>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {error && (\r\n        <Message message={`error: ${error} at task ${props.name}`} type=\"error\" setMessage={setError} />\r\n      )}\r\n      <div className={`task ${activeId === props.id && \"active\"}`} onClick={handleActive}>\r\n        <div className=\"overflow\">\r\n          <div className=\"buttons\">\r\n            {!setting.autoStartNextTask && (\r\n              <button aria-label=\"check button\" onClick={handleCheck}>\r\n                {props.check ? (\r\n                  <BsCheckCircleFill />\r\n                ) : (\r\n                  <MdRadioButtonUnchecked />\r\n                )}\r\n              </button>\r\n            )}\r\n            <button aria-label=\"edit button\" onClick={() => setOpenEdit(oe => !oe)}><FiEdit3 /></button>\r\n            <button aria-label=\"delet button\" onClick={handleDelete}><MdDelete /></button>\r\n          </div>\r\n        </div>\r\n        <div style={{\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          width: \"100%\",\r\n          justifyContent: \"space-between\"\r\n        }}>\r\n          <div className=\"task-inner\">\r\n            <div className=\"icon-container\">\r\n              {props.check ? (\r\n                <BsCheckCircleFill className=\"task-uncheck\" />\r\n              ) : (\r\n                <MdRadioButtonUnchecked className=\"task-check\" />\r\n              )}\r\n            </div>\r\n            <p style={{ textDecoration: props.check && \"line-through\" }}>{props.name}</p>\r\n          </div>\r\n          <p className=\"act-est\"><span>{props.act}</span> / <span>{props.est}</span></p>\r\n        </div>\r\n        {props.notes !== '' && (\r\n          <div className=\"task-notes\">\r\n            <p>{props.notes}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Task;"],"names":["TaskForm","lazy","props","dispatch","useDispatch","activeId","useSelector","state","tasks","setting","timer","useState","error","setError","openEdit","setOpenEdit","Suspense","fallback","oldData","setOpen","message","name","type","setMessage","className","id","onClick","check","autoStartNextTask","act","est","CHANGE_ACTIVE_TASK","data","checkTask","oe","deleteTask","style","display","alignItems","width","justifyContent","textDecoration","notes"],"sourceRoot":""}