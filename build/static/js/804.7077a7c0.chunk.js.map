{"version":3,"file":"static/js/804.7077a7c0.chunk.js","mappings":"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","sources":["components/Clock/Timer.js","utils/audioPlayer.js","utils/helper.js"],"sourcesContent":["import React, { lazy, Suspense, useEffect, useState, useCallback, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\"; // 2\r\n\r\nimport { changeActive, PERIOD, START_TIMER, STOP_TIMER } from \"../../actions/timer\";\r\n\r\nimport { pushNotification } from \"../../utils/helper\";\r\nimport audioPlayer from \"../../utils/audioPlayer\";\r\n\r\nimport Loading from \"../../utils/Loading\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst AnalogTimer = lazy(() => import(\"./Analog/Analog\"));\r\nconst DigitalTimer = lazy(() => import(\"./Digital/Digital\"));\r\n\r\nconst worker = new window.Worker('worker.js');\r\nconst Timer = () => {\r\n    const { active, activites, setting, started, periodNum } = useSelector((state) => state.timer);\r\n    const { activeId } = useSelector(state => state.tasks);\r\n    const [time, setTime] = useState(localStorage.getItem(\"restOfTime\") === null ? 0 : Number(localStorage.getItem(\"restOfTime\")));\r\n\r\n    const activePeriod = setting?.time[active];\r\n    const dispatch = useDispatch();\r\n\r\n    /** All sounds that we use it in timer.*/\r\n    const tickingSound = useRef(setting?.tickingType?.name !== \"none\" ?\r\n        audioPlayer({\r\n            src: setting?.tickingType?.src,\r\n            volume: setting?.tickingVolume,\r\n            loop: true\r\n        }) :\r\n        null\r\n    );\r\n\r\n    const alarmSound = useRef(\r\n        audioPlayer({\r\n            src: setting?.alarmType?.src,\r\n            volume: setting?.alarmVolume,\r\n            loop: setting?.alarmRepet\r\n        })\r\n    );\r\n\r\n    const clickSound = useRef(setting?.clickType?.name !== \"none\" ?\r\n        audioPlayer({\r\n            src: setting?.clickType?.src,\r\n            volume: setting?.clickVolume\r\n        }) : null\r\n    );\r\n\r\n    useEffect(() => {\r\n        // eslint-disable-next-line\r\n        if (typeof window?.Notification != undefined) {\r\n            if (window?.Notification?.permission === 'default') {\r\n                window?.Notification?.requestPermission();\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        document.body.style.backgroundColor = activites[active].color;\r\n\r\n        if (setting.time !== undefined) {\r\n            if (setting?.time[active] - Number(localStorage.getItem('restOfTime')) > 1) {\r\n                setTime(setting?.time[active] - Number(localStorage.getItem(\"restOfTime\")));\r\n            } else {\r\n                dispatch(changeActive(active, activeId));\r\n                localStorage.setItem('restOfTime', 0);\r\n            }\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [active, setting.time]);\r\n\r\n    useEffect(() => {\r\n        if (setting?.tickingType.name !== 'none') {\r\n            tickingSound.current.chengeVolume(setting?.tickingVolume);\r\n            tickingSound.current.changeFile(setting?.tickingType.src);\r\n        }\r\n\r\n        alarmSound.current.chengeVolume(setting?.alarmVolume);\r\n        alarmSound.current.changeFile(setting?.alarmType.src);\r\n        alarmSound.current.changeLoop(setting?.alarmRepet);\r\n\r\n        if (setting.clickType.name !== 'none') {\r\n            clickSound.current.chengeVolume(setting.clickVolume);\r\n            clickSound.current.changeFile(setting.clickType.src);\r\n        }\r\n    }, [setting]);\r\n\r\n    useEffect(() => {\r\n        if (((active !== PERIOD && setting.autoPomodors) || (active === PERIOD && setting.autoBreaks)) && periodNum !== 0 && started) {\r\n            setTimeout(() => {\r\n                alarmSound.current.handleStop();\r\n                if (setting.tickingType.name !== \"none\") {\r\n                    tickingSound.current.handlePlay();\r\n                }\r\n                worker.postMessage({ started: !started, count: setting.time[active] });\r\n                dispatch({ type: START_TIMER, data: 0 });\r\n                console.log(time, 0, \"autoBreaks autoPomodors\");\r\n            }, 1000)\r\n            console.log(active);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [active, setting.autoBreaks, setting.autoPomodors]);\r\n\r\n    useEffect(() => {\r\n        if (started) {\r\n            document.body.onbeforeunload = () => {\r\n                return () => {\r\n                    return \"Hello, world!\"\r\n                }\r\n            }\r\n\r\n            if (setting.focusMode) {\r\n                document.body.style.backgroundColor = \"rgb(30 30 30)\";\r\n                document.body.style.overflow = \"hidden\";\r\n            }\r\n        } else {\r\n            document.body.onbeforeunload = null;\r\n            if (setting.focusMode) {\r\n                document.body.style.backgroundColor = activites[active].color;\r\n                document.body.style.overflow = \"auto\";\r\n            }\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [started]);\r\n\r\n    worker.onmessage = (event) => {\r\n        if (event.data !== 'stop') {\r\n            setTime(event.data);\r\n            // eslint-disable-next-line\r\n            if (typeof window?.Notification != undefined) {\r\n                if (window?.Notification?.permission === 'granted') {\r\n                    if (time !== 0) {\r\n                        if (setting.notificationType === 'every') {\r\n                            if (time % (setting.notificationInterval * 60) === 0 && time !== activePeriod) {\r\n                                pushNotification(`${time / 60} minutes left!`);\r\n                            }\r\n                        } else {\r\n                            if (time - (setting.notificationInterval * 60) === 0 && time !== activePeriod) {\r\n                                pushNotification(`${time / 60} minutes left!`);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            console.log(event.data, time, 0, \"worker stop\");\r\n\r\n            alarmSound.current.handlePlay();\r\n            if (setting.tickingType.name !== \"none\") {\r\n                tickingSound.current.handleStop();\r\n            }\r\n\r\n            // eslint-disable-next-line\r\n            if (typeof window?.Notification != undefined) {\r\n                if (window?.Notification.permission === 'granted') {\r\n                    if (active === PERIOD) {\r\n                        pushNotification(\"It's time to take a break\");\r\n                    } else {\r\n                        pushNotification(\"It's time to focus!\");\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (((active !== PERIOD && !setting.autoPomodors) || (active === PERIOD && !setting.autoBreaks)) && periodNum !== 0 && !started) {\r\n                dispatch({ type: STOP_TIMER, data: 0 });\r\n            }\r\n\r\n            dispatch(changeActive(active, activeId));\r\n        }\r\n    }\r\n\r\n\r\n    const toggleStart = useCallback(() => {\r\n        console.log(\"toggle start\")\r\n        if (setting.clickType.name !== \"none\") {\r\n            clickSound.current.handlePlay();\r\n        }\r\n        alarmSound.current.handleStop();\r\n\r\n        if (started) {\r\n            worker.postMessage(\"stop\");\r\n            if (setting.tickingType.name !== \"none\") {\r\n                tickingSound.current.handleStop();\r\n            }\r\n            dispatch({ type: STOP_TIMER, data: setting.time[active] - time });\r\n        } else {\r\n            if (setting.tickingType.name !== \"none\") {\r\n                tickingSound.current.handlePlay();\r\n            }\r\n            if (!started) {\r\n                worker.postMessage({ started: !started, count: time });\r\n            }\r\n            dispatch({ type: START_TIMER, data: 0 });\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n    }, [started, time]);\r\n\r\n    const handleReset = () => {\r\n        setTime(activePeriod);\r\n        if (setting.clickType.name !== \"none\") {\r\n            clickSound.current.handlePlay();\r\n        }\r\n        localStorage.setItem(\"restOfTime\", 0)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"clock-container\" style={{ background: activites[active].timerBorder }}>\r\n                <div className=\"clock\">\r\n                    <Suspense fallback={<Loading color={activites[active].color} backgroud=\"transparent\" size=\"200\" strokeWidth=\"2.5\" />}>\r\n                        {setting.format === \"digital\" ? (\r\n                            <>\r\n                                <DigitalTimer handleReset={handleReset} toggleStart={toggleStart} setTime={setTime} time={time} />\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <AnalogTimer handleReset={handleReset} toggleStart={toggleStart} setTime={setTime} time={time} />\r\n                            </>\r\n                        )}\r\n                    </Suspense>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Timer;","const audioPlayer = ({ src, volume = 50, loop = false}) => {\r\n  const audio = new Audio();\r\n  audio.src = src;\r\n  audio.volume = volume / 100;\r\n\r\n  audio.loop = loop;\r\n\r\n  const handlePlay = () => {\r\n    if (audio.paused || !audio.currentTime) {\r\n      audio.play().catch(() => {});\r\n    }\r\n  };\r\n\r\n  const handleStop = () => {\r\n    audio.pause();\r\n  }\r\n\r\n  const chengeVolume = (value) => (audio.volume = value / 100);\r\n\r\n  const changeFile = (src) => {\r\n    audio.pause();\r\n    audio.src = src;\r\n  }\r\n\r\n  const changeLoop = (loop) => {\r\n    audio.loop = loop;\r\n  }\r\n\r\n  return {\r\n    handlePlay, \r\n    handleStop,\r\n    chengeVolume,\r\n    changeFile,\r\n    changeLoop\r\n  }\r\n}\r\n\r\nexport default audioPlayer;","export const formatTime = (t) => {\r\n  const sec = t % 60;\r\n  const min = Math.floor(t / 60);\r\n  // console.log(min, sec);\r\n  return `${min >= 10 ? min : '0' + min}:${sec >= 10 ? sec : '0' + sec}`\r\n};\r\n\r\nexport const pushNotification = (message) => {\r\n  // eslint-disable-next-line\r\n  if (typeof window?.Notification !== undefined) {\r\n    new window.Notification(message, {\r\n      icon: 'favicon.ico',\r\n      tag: \"mohamed ali\",\r\n      requireInteraction: true,\r\n      renotify: true\r\n    });\r\n  }\r\n};"],"names":["AnalogTimer","lazy","DigitalTimer","worker","window","Worker","useSelector","state","timer","active","activites","setting","started","periodNum","activeId","tasks","useState","localStorage","getItem","Number","time","setTime","activePeriod","dispatch","useDispatch","tickingSound","useRef","tickingType","name","audioPlayer","src","volume","tickingVolume","loop","alarmSound","alarmType","alarmVolume","alarmRepet","clickSound","clickType","clickVolume","useEffect","undefined","Notification","permission","requestPermission","document","body","style","backgroundColor","color","changeActive","setItem","current","chengeVolume","changeFile","changeLoop","PERIOD","autoPomodors","autoBreaks","setTimeout","handleStop","handlePlay","postMessage","count","type","START_TIMER","data","console","log","onbeforeunload","focusMode","overflow","onmessage","event","notificationType","notificationInterval","pushNotification","STOP_TIMER","toggleStart","useCallback","handleReset","className","background","timerBorder","Suspense","fallback","Loading","backgroud","size","strokeWidth","format","audio","Audio","paused","currentTime","play","catch","pause","value","formatTime","t","sec","min","Math","floor","message","icon","tag","requireInteraction","renotify"],"sourceRoot":""}