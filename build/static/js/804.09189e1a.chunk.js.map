{"version":3,"file":"static/js/804.09189e1a.chunk.js","mappings":"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","sources":["components/Clock/Timer.js","utils/audioPlayer.js","utils/helper.js"],"sourcesContent":["import React, { lazy, Suspense, useEffect, useState, useCallback, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\"; // 2\r\n\r\nimport { changeActive, PERIOD, START_TIMER, STOP_TIMER } from \"../../actions/timer\";\r\n\r\nimport { pushNotification } from \"../../utils/helper\";\r\nimport audioPlayer from \"../../utils/audioPlayer\";\r\n\r\nimport Loading from \"../../utils/Loading\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst AnalogTimer = lazy(() => import(\"./Analog/Analog\"));\r\nconst DigitalTimer = lazy(() => import(\"./Digital/Digital\"));\r\n\r\nconst worker = new window.Worker('worker.js');\r\nconst Timer = () => {\r\n    const { active, activites, setting, started, periodNum, restOfTime } = useSelector((state) => state.timer);\r\n    const { activeId } = useSelector(state => state.tasks);\r\n    const [time, setTime] = useState(restOfTime === null ? 0 : restOfTime);\r\n\r\n    const activePeriod = setting?.time[active];\r\n    const dispatch = useDispatch();\r\n\r\n    /** All sounds that we use it in timer.*/\r\n    const tickingSound = useRef(setting?.tickingType?.name !== \"none\" ?\r\n        audioPlayer({\r\n            src: setting?.tickingType?.src,\r\n            volume: setting?.tickingVolume,\r\n            loop: true\r\n        }) :\r\n        null\r\n    );\r\n    const alarmSound = useRef(\r\n        audioPlayer({\r\n            src: setting?.alarmType?.src,\r\n            volume: setting?.alarmVolume,\r\n            loop: setting?.alarmRepet\r\n        })\r\n    );\r\n    const clickSound = useRef(setting?.clickType?.name !== \"none\" ?\r\n        audioPlayer({\r\n            src: setting?.clickType?.src,\r\n            volume: setting?.clickVolume\r\n        }) : null\r\n    );\r\n\r\n    useEffect(() => {\r\n        // eslint-disable-next-line\r\n        if (typeof window?.Notification != undefined) {\r\n            if (window?.Notification?.permission === 'default') {\r\n                window?.Notification?.requestPermission();\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        document.body.style.backgroundColor = activites[active].color;\r\n\r\n        if (setting.time !== undefined) {\r\n            setTime(setting?.time[active] - restOfTime);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [active, setting.time]);\r\n\r\n    useEffect(() => {\r\n        if (setting?.tickingType.name !== 'none') {\r\n            tickingSound.current.chengeVolume(setting?.tickingVolume);\r\n            tickingSound.current.changeFile(setting?.tickingType.src);\r\n        }\r\n\r\n        alarmSound.current.chengeVolume(setting?.alarmVolume);\r\n        alarmSound.current.changeFile(setting?.alarmType.src);\r\n        alarmSound.current.changeLoop(setting?.alarmRepet);\r\n\r\n        if (setting.clickType.name !== 'none') {\r\n            clickSound.current.chengeVolume(setting.clickVolume);\r\n            clickSound.current.changeFile(setting.clickType.src);\r\n        }\r\n    }, [setting]);\r\n\r\n    useEffect(() => {\r\n        if ((active !== PERIOD && setting.autoBreaks) || (active === PERIOD && setting.autoPomodors && periodNum !== 0)) {\r\n            setTimeout(() => {\r\n                alarmSound.current.handleStop();\r\n                if (setting.tickingType.name !== \"none\") {\r\n                    tickingSound.current.handlePlay();\r\n                }\r\n                worker.postMessage({ started: !started, count: setting.time[active] });\r\n                dispatch({ type: START_TIMER, data: 0 });\r\n            }, 10000)\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [active, setting.autoBreaks, setting.autoPomodors]);\r\n\r\n    useEffect(() => {\r\n        if (started) {\r\n            document.body.onbeforeunload = () => {\r\n                return () => {\r\n                    return \"Hello, world!\"\r\n                }\r\n            }\r\n\r\n            if (setting.focusMode) {\r\n                document.body.style.backgroundColor = \"rgb(30 30 30)\";\r\n                document.body.style.overflow = \"hidden\";\r\n            }\r\n        } else {\r\n            document.body.onbeforeunload = null;\r\n            if (setting.focusMode) {\r\n                document.body.style.backgroundColor = activites[active].color;\r\n                document.body.style.overflow = \"auto\";\r\n            }\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [started]);\r\n\r\n    worker.onmessage = (event) => {\r\n        if (event.data !== 'stop') {\r\n            setTime(event.data);\r\n            // eslint-disable-next-line\r\n            if (typeof window?.Notification != undefined) {\r\n                if (window?.Notification?.permission === 'granted') {\r\n                    if (time !== 0) {\r\n                        if (setting.notificationType === 'every') {\r\n                            if (time % (setting.notificationInterval * 60) === 0 && time !== activePeriod) {\r\n                                pushNotification(`${time / 60} minutes left!`);\r\n                            }\r\n                        } else {\r\n                            if (time - (setting.notificationInterval * 60) === 0 && time !== activePeriod) {\r\n                                pushNotification(`${time / 60} minutes left!`);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            dispatch({ type: STOP_TIMER, data: 0 });\r\n\r\n            alarmSound.current.handlePlay();\r\n            if (setting.tickingType.name !== \"none\") {\r\n                tickingSound.current.handleStop();\r\n            }\r\n\r\n            // eslint-disable-next-line\r\n            if (typeof window?.Notification != undefined) {\r\n                if (window?.Notification.permission === 'granted') {\r\n                    if (active === PERIOD) {\r\n                        pushNotification(\"It's time to take a break\");\r\n                    } else {\r\n                        pushNotification(\"It's time to focus!\");\r\n                    }\r\n                }\r\n            }\r\n\r\n            dispatch(changeActive(active, activeId));\r\n        }\r\n    }\r\n\r\n\r\n    const toggleStart = useCallback(() => {\r\n        console.log(\"toggle start\")\r\n        if (setting.clickType.name !== \"none\") {\r\n            clickSound.current.handlePlay();\r\n        }\r\n        alarmSound.current.handleStop();\r\n\r\n        if (started) {\r\n            worker.postMessage(\"stop\");\r\n            if (setting.tickingType.name !== \"none\") {\r\n                tickingSound.current.handleStop();\r\n            }\r\n            dispatch({ type: STOP_TIMER, data: setting.time[active] - time });\r\n        } else {\r\n            if (setting.tickingType.name !== \"none\") {\r\n                tickingSound.current.handlePlay();\r\n            }\r\n            worker.postMessage({ started: !started, count: time });\r\n            dispatch({ type: START_TIMER, data: 0 });\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n    }, [started, time]);\r\n\r\n    const handleReset = () => {\r\n        setTime(activePeriod);\r\n        if (setting.clickType.name !== \"none\") {\r\n            clickSound.current.handlePlay();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"clock-container\" style={{ background: activites[active].timerBorder }}>\r\n                <div className=\"clock\">\r\n                    <Suspense fallback={<Loading color={activites[active].color} backgroud=\"transparent\" size=\"200\" strokeWidth=\"2.5\" />}>\r\n                        {setting.format === \"digital\" ? (\r\n                            <>\r\n                                <DigitalTimer handleReset={handleReset} toggleStart={toggleStart} setTime={setTime} time={time} />\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <AnalogTimer handleReset={handleReset} toggleStart={toggleStart} setTime={setTime} time={time} />\r\n                            </>\r\n                        )}\r\n                    </Suspense>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Timer;","const audioPlayer = ({ src, volume = 50, loop = false}) => {\r\n  const audio = new Audio();\r\n  audio.src = src;\r\n  audio.volume = volume / 100;\r\n\r\n  audio.loop = loop;\r\n\r\n  const handlePlay = () => {\r\n    if (audio.paused || !audio.currentTime) {\r\n      audio.play().catch(() => {});\r\n    }\r\n  };\r\n\r\n  const handleStop = () => {\r\n    audio.pause();\r\n  }\r\n\r\n  const chengeVolume = (value) => (audio.volume = value / 100);\r\n\r\n  const changeFile = (src) => {\r\n    audio.pause();\r\n    audio.src = src;\r\n  }\r\n\r\n  const changeLoop = (loop) => {\r\n    audio.loop = loop;\r\n  }\r\n\r\n  return {\r\n    handlePlay, \r\n    handleStop,\r\n    chengeVolume,\r\n    changeFile,\r\n    changeLoop\r\n  }\r\n}\r\n\r\nexport default audioPlayer;","export const formatTime = (t) => {\r\n  const sec = t % 60;\r\n  const min = Math.floor(t / 60);\r\n  // console.log(min, sec);\r\n  return `${min >= 10 ? min : '0' + min}:${sec >= 10 ? sec : '0' + sec}`\r\n};\r\n\r\nexport const pushNotification = (message) => {\r\n  // eslint-disable-next-line\r\n  if (typeof window?.Notification !== undefined) {\r\n    new window.Notification(message, {\r\n      icon: 'favicon.ico',\r\n      tag: \"mohamed ali\",\r\n      requireInteraction: true,\r\n      renotify: true\r\n    });\r\n  }\r\n};"],"names":["AnalogTimer","lazy","DigitalTimer","worker","window","Worker","useSelector","state","timer","active","activites","setting","started","periodNum","restOfTime","activeId","tasks","useState","time","setTime","activePeriod","dispatch","useDispatch","tickingSound","useRef","tickingType","name","audioPlayer","src","volume","tickingVolume","loop","alarmSound","alarmType","alarmVolume","alarmRepet","clickSound","clickType","clickVolume","useEffect","undefined","Notification","permission","requestPermission","document","body","style","backgroundColor","color","current","chengeVolume","changeFile","changeLoop","PERIOD","autoBreaks","autoPomodors","setTimeout","handleStop","handlePlay","postMessage","count","type","START_TIMER","data","onbeforeunload","focusMode","overflow","onmessage","event","notificationType","notificationInterval","pushNotification","STOP_TIMER","changeActive","toggleStart","useCallback","console","log","handleReset","className","background","timerBorder","Suspense","fallback","Loading","backgroud","size","strokeWidth","format","audio","Audio","paused","currentTime","play","catch","pause","value","formatTime","t","sec","min","Math","floor","message","icon","tag","requireInteraction","renotify"],"sourceRoot":""}